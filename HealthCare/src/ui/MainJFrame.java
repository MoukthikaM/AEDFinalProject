/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import java.lang.*;
import PatientUI.PatientWorkArea;
import PersonUI.PersonWorkArea;
import healthcare.CityList;
import healthcare.Encounter;
import healthcare.Patient;
import healthcare.System;
import healthcare.PersonDirectory;
import healthcare.PatientDirectory;
import healthcare.Person;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author moukthikamanapati
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    PersonDirectory personDirectory;
    PatientDirectory patientDirectory;
    CityList cityList;
    System sys;
    
   // String patientpath = "/Users/moukthikamanapati/NetBeansProjects/HealthCare/src/res/PatientDirectory_2.ser";
    String patientpath= "src/res/PatientDirectory_2.ser";
    String personpath = "src/res/PersonDirectory_2.ser";
    private Component frame1;
    static int start = 0;

    public MainJFrame() {
        initComponents();
        sys = new System();
        personDirectory = sys.getPersonDirectory();
        patientDirectory = sys.getPatientDirectory();
        cityList = sys.getCityList();
        setExtendedState(MAXIMIZED_BOTH);
        
        try {
            try (FileInputStream filePatient = new FileInputStream(patientpath); ObjectInputStream inPatient = new ObjectInputStream(filePatient)) {

                patientDirectory = (PatientDirectory) inPatient.readObject();
            }
        } catch (IOException | ClassNotFoundException i) {
            java.lang.System.out.println("Patient class not found");
            return;
        }

        try {

            try (FileInputStream filePerson = new FileInputStream(personpath); ObjectInputStream inPerson = new ObjectInputStream(filePerson)) {
                personDirectory = (PersonDirectory) inPerson.readObject();
            }
        } catch (IOException | ClassNotFoundException i) {
            java.lang.System.out.println("Person class not found");
            return;
        }
        java.lang.System.out.println("reading file Stream");
//        for (Patient p : patientDirectory.getPatientlist()) {
//            java.lang.System.out.println(p.getPerson().getAge());
//        }
        for (Patient p : patientDirectory.getPatientList()) {
            VitalSignStatus(p);
        }
        int c = 0;
          for(Patient p:patientDirectory.getPatientList()){
                c++;
            }
          java.lang.System.out.println(c+"count");
        PatientDirectory.setCounter(c);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        controlPanel = new javax.swing.JPanel();
        btnPatient = new javax.swing.JButton();
        btnPerson = new javax.swing.JButton();
        userProcessContainer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAb = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnPatient.setText("Patient");
        btnPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientActionPerformed(evt);
            }
        });

        btnPerson.setText("Person");
        btnPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPatient, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPerson, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(btnPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(657, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(controlPanel);

        userProcessContainer.setLayout(new java.awt.CardLayout());

        tblAb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "HeartRate", "Bp", "weight", "respiratoryrate", "status"
            }
        ));
        jScrollPane1.setViewportView(tblAb);

        userProcessContainer.add(jScrollPane1, "card2");

        jSplitPane1.setRightComponent(userProcessContainer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1235, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 904, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1254, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonActionPerformed
        PersonWorkArea pwa = new PersonWorkArea(userProcessContainer, personDirectory, cityList, patientDirectory);
        userProcessContainer.add("PersonWorkArea", pwa);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnPersonActionPerformed

    private void btnPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientActionPerformed
        PatientWorkArea pwa = new PatientWorkArea(userProcessContainer, personDirectory, patientDirectory);
        userProcessContainer.add("PatientWorkArea", pwa);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnPatientActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        java.lang.System.out.println("closing");
        java.lang.System.out.println("file Stream");
        try {
            FileOutputStream filePerson;
            try (FileOutputStream filePatient = new FileOutputStream(patientpath)) {
                filePerson = new FileOutputStream(personpath);
                try (ObjectOutputStream inPatient = new ObjectOutputStream(filePatient); ObjectOutputStream inPerson = new ObjectOutputStream(filePerson)) {
                    inPatient.writeObject(patientDirectory);
                    inPerson.writeObject(personDirectory);
                }
            }
            filePerson.close();
        } catch (IOException i) {
            return;
        }
        if (JOptionPane.showConfirmDialog(frame1, "Are you sure you want to close this window?", "Close Window?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            java.lang.System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        String dir = java.lang.System.getProperty("user.dir");
        java.lang.System.out.println("dir"+dir);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    private void VitalSignStatus(Patient p) {
        String vitalSignStatus = "Normal";
        int patientAge;
        try {
            p.getEncounterhistory();
            p.getEncounterhistory().getEcounterlist();
            List<Encounter> en = p.getEncounterhistory().getEcounterlist();
            Encounter ennew = en.get(en.size() - 1);
            int respirationRate = ennew.getVitals().getRespirationrate();
            double heartRate = ennew.getVitals().getHeartrate();
            int bloodPressure = ennew.getVitals().getBp();
            double weight = ennew.getVitals().getWeight();
            patientAge = p.getPerson().getAge();
            java.lang.System.out.println("Abnormal");
            java.lang.System.out.println(heartRate);
            /*Toddler*/
            if (patientAge >= 1 && patientAge <= 3) {
                if ((respirationRate < 20 || respirationRate > 30) /*Respiration Rate*/
                        || (heartRate < 80 || heartRate > 130) /*Heart Rate*/
                        || (bloodPressure < 80 || bloodPressure > 110) /*Blood Pressure*/
                        || (weight < 22 || weight > 31)) /*Weight*/ {
                    vitalSignStatus = "Abnormal";
                }
            }
            /*Preschooler*/
            if (patientAge >= 4 && patientAge <= 5) {
                if ((respirationRate < 20 || respirationRate > 30) || (heartRate < 80 || heartRate > 120)
                        || (bloodPressure < 80 || bloodPressure > 110) || (weight < 31 || weight > 40)) {
                    vitalSignStatus = "Abnormal";
                }
            }
            /*School Age*/
            if (patientAge >= 6 && patientAge <= 12) {
                if ((respirationRate < 20 || respirationRate > 30) || (heartRate < 70 || heartRate > 110)
                        || (bloodPressure < 80 || bloodPressure > 120) || (weight < 41 || weight > 92)) {
                    vitalSignStatus = "Abnormal";
                }
            }
            /*Adolescent*/
            if (patientAge >= 13) {
                if ((respirationRate < 12 || respirationRate > 20) || (heartRate < 55 || heartRate > 105)
                        || (bloodPressure < 110 || bloodPressure > 120) || (weight < 110)) {
                    vitalSignStatus = "Abnormal";
                }
            }
            if (vitalSignStatus.equals("Abnormal")) {
                populateTable(p, ennew);
                start++;
         java.lang.System.out.println("pop"+start);
            }
        } catch (Exception e) {
            java.lang.System.out.println("Abnormal Excep");
//            JOptionPane.showMessageDialog(this, "There is no encounter history for this person");
//            return;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPatient;
    private javax.swing.JButton btnPerson;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tblAb;
    private javax.swing.JPanel userProcessContainer;
    // End of variables declaration//GEN-END:variables

    private void populateTable(Patient p, Encounter ennew) {
        DefaultTableModel model = (DefaultTableModel) tblAb.getModel();

        if (start == 0) {
            model.setRowCount(0);
//            java.lang.System.out.println("zero test");
            
        } else {
            model.setRowCount(start);
//            java.lang.System.out.println("pop");

        }
        
        

        Object row[] = new Object[7];
        row[0] = p.getPerson().getName();
        row[1] = p.getPerson().getAge();
        row[2] = ennew.getVitals().getHeartrate();
        row[3] = ennew.getVitals().getBp();
        row[4] = ennew.getVitals().getWeight();
        row[5] = ennew.getVitals().getHeartrate();
        row[6] = "Abnormal";
        model.addRow(row);
        
    }
}
