/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package PatientUI;

import healthcare.Encounter;
import healthcare.EncounterHistory;
import healthcare.Patient;
import healthcare.VitalSigns;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author moukthikamanapati
 */
public class EncounterHistoryCreate extends javax.swing.JPanel {

    /**
     * Creates new form EncounterHistoryView
     */
    JPanel userProcessContainer;
    Patient patient;
    int start=0;

    EncounterHistoryCreate(JPanel userProcessContainer, Patient patient) {
    initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        populateTable();
        
    }
    private void populateTable() {

        DefaultTableModel model = (DefaultTableModel) tblen.getModel();
        model.setRowCount(0);
        try
        {  
            patient.getEncounterhistory();
            patient.getEncounterhistory().getEcounterlist();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "There is no encounter history for this person");
            return;
        }
         for (Encounter en : patient.getEncounterhistory().getEcounterlist()) {
            Object row[] = new Object[5];
            row[0] = en;
            row[1] = en.getVitals().getHeartrate();
            row[2] = en.getVitals().getBp();
            row[3] = en.getVitals().getWeight();
            row[4] = en.getVitals().getRespirationrate();
            model.addRow(row);
        }
          
         start = model.getRowCount();
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblen = new javax.swing.JTable();
        btnEncounter = new javax.swing.JToggleButton();
        btnAddEncounter = new javax.swing.JButton();
        BtnUpdate = new javax.swing.JButton();

        tblen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter Date", "Heart rate", "BP", "weight", "respirationrate"
            }
        ));
        jScrollPane1.setViewportView(tblen);

        btnEncounter.setText("Save");
        btnEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterActionPerformed(evt);
            }
        });

        btnAddEncounter.setText("Add New Encounter");
        btnAddEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEncounterActionPerformed(evt);
            }
        });

        BtnUpdate.setText("update");
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(BtnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(344, 344, 344))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1075, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(915, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterActionPerformed
        EncounterHistory enh;
         DefaultTableModel model = (DefaultTableModel) tblen.getModel();
        int totalrows = model.getRowCount();
        if(start==0)
        {
         enh = patient.addEncounterHistory();
        }
        else
        {
            enh=patient.getEncounterhistory();
        }
        for (int i = start; i < totalrows; i++) {

           Encounter eh = enh.addEncounter();
         //  System.out.println("hello"+patient.getName());
           VitalSigns vitals = eh.addVitals();
           //eh.setEncounterdate();
           vitals.setHeartrate(Double.parseDouble((String)model.getValueAt(i, 1)));
           vitals.setBp(Integer.parseInt((String) model.getValueAt(i, 2)));        
           vitals.setWeight(Double.parseDouble((String) model.getValueAt(i, 3)));
           vitals.setRespirationrate(Integer.parseInt((String) model.getValueAt(i, 2)));
           eh.setVitals(vitals);
          
        }
        
       patient.setEncounterhistory(enh);
    }//GEN-LAST:event_btnEncounterActionPerformed

    private void btnAddEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEncounterActionPerformed
       DefaultTableModel model = (DefaultTableModel) tblen.getModel();
        model.addRow(new Object[1]);
       
       
        
    }//GEN-LAST:event_btnAddEncounterActionPerformed

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
         int selectedRowIndex = tblen.getSelectedRow();
        int rr;
        int bp;
        double hr;
        double wt;
        System.out.println("updating Encounter");

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblen.getModel();

        try {

            hr = Double.parseDouble(String.valueOf(model.getValueAt(selectedRowIndex, 1)));
            bp = Integer.parseInt(String.valueOf(model.getValueAt(selectedRowIndex, 2)));
            wt = Double.parseDouble(String.valueOf(model.getValueAt(selectedRowIndex, 3)));
            rr = Integer.parseInt(String.valueOf(model.getValueAt(selectedRowIndex, 4)));

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please check if you have entered all the values", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Encounter e = (Encounter) tblen.getValueAt(selectedRowIndex, 0);
        for (Encounter newen : patient.getEncounterhistory().getEcounterlist()) {
            if (newen.equals(e)) {
                e.getVitals().setBp(bp);
                e.getVitals().setHeartrate(hr);
                e.getVitals().setRespirationrate(rr);
                e.getVitals().setWeight(wt);
               //  e.setVitals(vitals);
            }
        }

        
        populateTable();

    }//GEN-LAST:event_BtnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JButton btnAddEncounter;
    private javax.swing.JToggleButton btnEncounter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblen;
    // End of variables declaration//GEN-END:variables

    private void addEncounterHistory() {
      
        
    }
}
