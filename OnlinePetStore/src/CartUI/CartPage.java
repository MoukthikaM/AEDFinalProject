/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package CartUI;

import UserUI.Merch;
import UserUI.UserWorkArea;
import db4o.Email;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import onlinepetstore.ClothingDirectory;
import onlinepetstore.MasterOderList;
import onlinepetstore.MerchOrderList;
import onlinepetstore.Merchandise;
import onlinepetstore.MerchandiseList;
import onlinepetstore.OnlineStore;
import onlinepetstore.Order;
import onlinepetstore.OrderItemMerch;
import onlinepetstore.OrderItemPet;
import onlinepetstore.Pet;
import onlinepetstore.PetDirectory;
import onlinepetstore.User;

/**
 *
 * @author moukthikamanapati
 */
public class CartPage extends javax.swing.JPanel {

    /**
     * Creates new form CartPage
     */
    JPanel userProcess;
    PetDirectory petDirectory;
    Order currentorder;
    ClothingDirectory clothingDirectory;
    MerchOrderList merchList;
    private User user;
    private OnlineStore os;
    private MasterOderList masterorder;
//    private Object masterList;
    private MerchandiseList merchandiseList;

//    public CartPage(JPanel userProcess, PetDirectory petDirectory, Order currentorder, ClothingDirectory clothingDirectory, MerchOrderList merchList) {
//        initComponents();
//        this.userProcess = userProcess;
//        this.petDirectory = petDirectory;
//        this.currentorder = currentorder;
//        this.clothingDirectory = clothingDirectory;
//        this.merchList = merchList;
//        populateTable();
//        populateMerchTable();
//    }
    public CartPage(JPanel userProcess, OnlineStore os, User user) {

        initComponents();
        this.userProcess = userProcess;
        this.os = os;
        this.petDirectory = os.getPetDirectory();
        this.currentorder = os.getOrder();
        this.merchList = os.getMerchList();
        this.user = user;
        this.masterorder = os.getMasterList();
        this.merchandiseList = os.getMerchandiseList();
        populateTable();
        populateMerchTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TblPet = new javax.swing.JTable();
        BtnCheckout = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        Home = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblmerch = new javax.swing.JTable();
        merchdel = new javax.swing.JButton();
        merchcheckout = new javax.swing.JButton();

        setBackground(new java.awt.Color(123, 69, 12));

        TblPet.setBackground(new java.awt.Color(219, 210, 196));
        TblPet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PetName", "Breed", "Age", "Price"
            }
        ));
        TblPet.setRowHeight(24);
        jScrollPane1.setViewportView(TblPet);

        BtnCheckout.setBackground(new java.awt.Color(255, 255, 204));
        BtnCheckout.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        BtnCheckout.setText("Checkout");
        BtnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCheckoutActionPerformed(evt);
            }
        });

        BtnDelete.setBackground(new java.awt.Color(255, 255, 204));
        BtnDelete.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        BtnDelete.setText("Remove");
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        Home.setBackground(new java.awt.Color(255, 255, 204));
        Home.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        Home.setText("Home");
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        tblmerch.setBackground(new java.awt.Color(219, 210, 196));
        tblmerch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Price", "quantity"
            }
        ));
        tblmerch.setRowHeight(24);
        jScrollPane2.setViewportView(tblmerch);

        merchdel.setBackground(new java.awt.Color(255, 255, 204));
        merchdel.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        merchdel.setText("Remove");
        merchdel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchdelActionPerformed(evt);
            }
        });

        merchcheckout.setBackground(new java.awt.Color(255, 255, 204));
        merchcheckout.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        merchcheckout.setText("Checkout");
        merchcheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchcheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(BtnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnCheckout))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(merchdel)
                        .addGap(18, 18, 18)
                        .addComponent(merchcheckout))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(merchdel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(merchcheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCheckoutActionPerformed
        System.out.println("reached checkout pet method");

        for (OrderItemPet p : currentorder.getOderitem()) {

            Pet pet = p.getPet();
            petDirectory.removePerson(pet);

        }
        if (masterorder == null) {
            masterorder = new MasterOderList();
        }

        currentorder = new Order();
        os.setOrder(currentorder);
        os.setPetDirectory(petDirectory);
        populateTable();

        System.out.println("Pet order placed successfully");

        Email e = new Email();
        String body = " your pet is on the way :) ";
        e.sendMail(user.getEmail(), "Registration", body);

    }//GEN-LAST:event_BtnCheckoutActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        System.out.println("reached remove method");
        int selectedrow = TblPet.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(this, "please select a OrderItem First");
            return;
        }
        OrderItemPet item = (OrderItemPet) TblPet.getValueAt(selectedrow, 0);

        currentorder.deleteItem(item);

        populateTable();
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        UserWorkArea uw = new UserWorkArea(userProcess, os, user);
        userProcess.add("UserWorkArea", uw);
        CardLayout layout = (CardLayout) userProcess.getLayout();
        layout.next(userProcess);
    }//GEN-LAST:event_HomeActionPerformed

    private void merchdelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchdelActionPerformed
        System.out.println("reached remove method");
        int selectedrow = tblmerch.getSelectedRow();
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(this, "please select a OrderItem First");
            return;
        }
        OrderItemMerch item = (OrderItemMerch) tblmerch.getValueAt(selectedrow, 0);

        merchList.removeOrderItemMerch(item);

        populateMerchTable();
    }//GEN-LAST:event_merchdelActionPerformed

    private void merchcheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchcheckoutActionPerformed
        System.out.println("reached checkout merch method");

        for (OrderItemMerch p : merchList.getMerchList()) {

            Merchandise m = p.getMerch();
            merchandiseList.removeMerchandise(m);

        }

        merchList = new MerchOrderList();
        os.setMerchList(merchList);
        os.setMerchandiseList(merchandiseList);
        populateMerchTable();
        Email e = new Email();
        String body = " your pet merchandise is on the way :) ";
        e.sendMail(user.getEmail(), "Registration", body);
    }//GEN-LAST:event_merchcheckoutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCheckout;
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton Home;
    private javax.swing.JTable TblPet;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton merchcheckout;
    private javax.swing.JButton merchdel;
    private javax.swing.JTable tblmerch;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) TblPet.getModel();
        model.setRowCount(0);

        for (OrderItemPet p : currentorder.getOderitem()) {
            if (p.getUsername().equals(user.getUsername())) {
                Object row[] = new Object[4];
                row[0] = p;
                row[1] = p.getPet().getBreed();
                row[2] = p.getPet().getAge();
                row[3] = p.getPet().getPrice();
                model.addRow(row);
            }
        }
    }

    private void populateMerchTable() {
        DefaultTableModel model = (DefaultTableModel) tblmerch.getModel();
        model.setRowCount(0);

        for (OrderItemMerch o : merchList.getMerchList()) {
            if (o.getUsername().equals(user.getUsername())) {
                Object row[] = new Object[3];
                row[0] = o;
                row[1] = o.getMerch().getPrice();
                row[2] = o.getMerch().getQuantity();

                model.addRow(row);
            }
        }
    }
}
