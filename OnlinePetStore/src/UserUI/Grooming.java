/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserUI;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import onlinepetstore.Doctor;
import onlinepetstore.MyPets;
import onlinepetstore.MyPetsList;
import onlinepetstore.OnlineStore;
import onlinepetstore.Pet;
import onlinepetstore.PetCare;
import onlinepetstore.PetCareAppointment;
import onlinepetstore.PetDirectory;
import onlinepetstore.Pricing;
import onlinepetstore.PricingDirectory;
import onlinepetstore.Service;
import onlinepetstore.User;

/**
 *
 * @author moukthikamanapati
 */
public class Grooming extends javax.swing.JPanel {

    /**
     * Creates new form Grooming
     */
//    public Grooming() {
//        initComponents();
//    }
    JPanel service,userprocess;
    PetDirectory petDirectory;
    PricingDirectory pricingDirectory;
    User user;
    PetCareAppointment papp;
    private MyPetsList mypetslist;
    private OnlineStore os;
    private PetCare app;
    private MyPetsList mypet;
   
    

    Grooming(JPanel service, PetDirectory petDirectory, PricingDirectory pricingDirectory, User user, PetCareAppointment papp) {
        initComponents();
        this.service = service;
        this.petDirectory = petDirectory;
        this.pricingDirectory = pricingDirectory;
        this.user = user;
        this.papp = papp;
        populatePricingTable();
        populatePetsTable();
    }

    Grooming(JPanel service, OnlineStore os, User user) {
      initComponents();
        this.service = service;
        this.os = os;
        this.petDirectory = os.getPetDirectory();
        this.pricingDirectory = os.getPricingDirectory();
        this.user = user;
        this.papp = os.getPapp();
        this.mypetslist = os.getMypetList();
        this.mypet = os.getMypetList();
        populatePricingTable();
        populatePetsTable(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TblPrice = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        mypets = new javax.swing.JTable();
        book = new javax.swing.JButton();

        setBackground(new java.awt.Color(123, 69, 12));

        TblPrice.setBackground(new java.awt.Color(219, 210, 196));
        TblPrice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Category", "Prize"
            }
        ));
        TblPrice.setRowHeight(24);
        jScrollPane1.setViewportView(TblPrice);

        mypets.setBackground(new java.awt.Color(219, 210, 196));
        mypets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "petname", "age", "breed"
            }
        ));
        mypets.setRowHeight(24);
        jScrollPane2.setViewportView(mypets);

        book.setBackground(new java.awt.Color(255, 255, 204));
        book.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        book.setText("Book");
        book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(book)
                .addContainerGap(217, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(book, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(176, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookActionPerformed
        int row = TblPrice.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
         Pricing p = (Pricing) TblPrice.getValueAt(row, 0);
         int row1 = mypets.getSelectedRow();
        if(row1<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
         MyPets mypet = (MyPets) mypets.getValueAt(row1, 0);
         if(papp==null)
         {
             papp = new PetCareAppointment();
         }
     app = papp.addPetCare();
     Service service = new Service();
     service.setServicename(p.getServicetype());
     service.setPrice(p.getPrice());
     app.setService(service);
    app.setPetname(mypet.getPet().getPetName());
     app.setUsername(mypet.getUser().getUsername());
//     app.setMypet(mypet);
    // os.setMypetList(mypetslist);
     os.setPapp(papp);
    }//GEN-LAST:event_bookActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TblPrice;
    private javax.swing.JButton book;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable mypets;
    // End of variables declaration//GEN-END:variables

    private void populatePricingTable() {
        DefaultTableModel model = (DefaultTableModel) TblPrice.getModel();
        model.setRowCount(0);
        System.out.println("pp+"+pricingDirectory.getPriceList().size());
        for (Pricing p : pricingDirectory.getPriceList()) {
            if (p.getServicetype().equalsIgnoreCase("grooming")) {
                Object row[] = new Object[2];
                row[0] = p;
                row[1] = p.getPrice();
                model.addRow(row);
            }
        }
    }

    private void populatePetsTable() {

        DefaultTableModel model = (DefaultTableModel) mypets.getModel();
        model.setRowCount(0);
        System.out.println("populate on pet type");

        for (MyPets p : mypetslist.getPetsList()) {
           if(p.getUser().getUsername().equals(user.getUsername())){
            Object row[] = new Object[3];
            row[0] = p;
            row[2] = p.getPet().getAge();
            row[1] = p.getPet().getBreed();
        
            model.addRow(row);  
           }
        }
    }
}
